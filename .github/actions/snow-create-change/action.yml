name: 'ServiceNow Create Change'
description: 'Create a standard IT change in ServiceNow using the nnash API with GitHub Secrets'

inputs:
  username:
    description: 'ServiceNow username'
    required: true
  password:
    description: 'ServiceNow password'
    required: true
  client_id:
    description: 'OAuth client ID'
    required: true
  client_secret:
    description: 'OAuth client secret'
    required: true
  template_id:
    description: 'Template ID'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Create ServiceNow Change
      shell: bash
      run: |
        # Set variables
        INSTANCE="https://novonordisktraining.service-now.com"
        
        # Debug: Show all environment variables
        echo "Environment variables:"
        # Get credentials from inputs
        USERNAME="${{ inputs.username }}"
        PASSWORD="${{ inputs.password }}"
        CLIENT_ID="${{ inputs.client_id }}"
        CLIENT_SECRET="${{ inputs.client_secret }}"
        TEMPLATE_ID="${{ inputs.template_id }}"
        
        # Show values with first/last characters of sensitive values
        echo "\nValues being used:"
        echo "USERNAME: ${USERNAME:0:2}***** (${#USERNAME} chars)"
        if [ ${#PASSWORD} -gt 0 ]; then
          echo "PASSWORD: ${PASSWORD:0:1}*****${PASSWORD: -1} (${#PASSWORD} chars)"
        else
          echo "PASSWORD: (empty)"
        fi
        echo "CLIENT_ID: ${CLIENT_ID:0:4}***** (${#CLIENT_ID} chars)"
        if [ ${#CLIENT_SECRET} -gt 0 ]; then
          echo "CLIENT_SECRET: ${CLIENT_SECRET:0:1}*****${CLIENT_SECRET: -1} (${#CLIENT_SECRET} chars)"
        else
          echo "CLIENT_SECRET: (empty)"
        fi
        echo "INSTANCE: $INSTANCE"
        # Get OAuth 2.0 token using password grant
        echo "Getting OAuth 2.0 token..."
        # URL encode the password and client secret
        ENCODED_PASSWORD=$(echo -n "$PASSWORD" | jq -sRr @uri)
        ENCODED_CLIENT_SECRET=$(echo -n "$CLIENT_SECRET" | jq -sRr @uri)
        
        # Debug: Show encoded values
        echo "Encoded Password: $ENCODED_PASSWORD"
        echo "Encoded Client Secret: $ENCODED_CLIENT_SECRET"
        
        # Make the request with encoded values
        echo "Making request to: $INSTANCE/oauth_token.do"
        echo "Client ID: ${CLIENT_ID:0:4}*****"
        echo "Username: $USERNAME"
        
        # Using working curl command with response capture
        echo "Sending request to get access token..."
        TOKEN_RESPONSE=$(curl -sS -X POST \
          "https://novonordisktraining.service-now.com/oauth_token.do" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=password" \
          -d "client_id=$CLIENT_ID" \
          -d "client_secret=$ENCODED_CLIENT_SECRET" \
          -d "username=$USERNAME" \
          -d "password=$ENCODED_PASSWORD")

        # Debug: Show the raw response
        echo "Raw token response:"
        echo "$TOKEN_RESPONSE"
        
        # Extract and display the access token
        if ! ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token' 2>/dev/null) || [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "‚ùå Failed to get access token. Response was:"
          echo "$TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "‚úÖ Successfully obtained access token"
        echo "Access token: ${ACCESS_TOKEN:0:10}..."
        
        # Set the access token as an output
        echo "access_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT
        
        # Create the change request
        echo "Creating standard change request..."
        
        # Calculate dates (tomorrow and day after)
        export TZ=UTC
        START_DATE=$(date -v+1d +"%Y-%m-%d 00:00:00" 2>/dev/null || date -d "tomorrow" +"%Y-%m-%d 00:00:00")
        END_DATE=$(date -v+2d +"%Y-%m-%d 00:00:00" 2>/dev/null || date -d "tomorrow + 1 day" +"%Y-%m-%d 00:00:00")
        
        # Debug template ID
        echo "Template ID from input: '$TEMPLATE_ID'"
        TEMPLATE_ID=$(echo "$TEMPLATE_ID" | tr -d '[:space:]')  # Remove any whitespace
        echo "Template ID after cleanup: '${TEMPLATE_ID:0:4}...${TEMPLATE_ID: -4}' (first 4 and last 4 chars)"
        echo "Full template ID: $TEMPLATE_ID"
        if [ -z "$TEMPLATE_ID" ]; then
          echo "‚ùå Error: TEMPLATE_ID is empty"
          exit 1
        fi
        echo AAA
        echo $INSTANCE
        echo BBB
        echo "https://novonordisktraining.service-now.com/api/nnash/v1/change_request/standard/create/0bfe466b2b662250f026f6bcf291bfbe"
        # Create and send change request
        RESPONSE=$(curl -sS -X POST \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -H "Accept: application/json" \
          -d @- "https://novonordisktraining.service-now.com/api/nnash/v1/change_request/standard/create/0bfe466b2b662250f026f6bcf291bfbe" <<EOF
        {
          "u_service_offering": "SO-6712 BMS FMS CoE",
          "start_date": "2025-10-12 00:00:00",
          "end_date": "2025-10-13 00:00:00",
          "work_start": "2025-10-15 00:00:00",
          "work_end": "2025-10-19 00:00:00",
          "risk": "1",
          "requested_by": "WKRZ",
          "impact": "2",
          "urgency": "3",
          "test_plan": "Lorem ipsum dolor sit amet",
          "cmdb_ci": "4aa41e6f1be0f4502f98dce0b24bcbbd",
          "u_sarbox": "yes",
          "u_criticality": "other_regulatory",
          "parent": "INC4215160",
          "u_release": "1dff7bc73b8e96d4cbad6d6eb5e45a80",
          "u_service_request": "RITM0781791",
          "u_integration_task": "INTG0634241",
          "u_change_manager": "WKRZ",
          "assigned_to": "WKRZ"
        }
        EOF
        )

        # Check for errors
        if ! echo "$RESPONSE" | jq -e '.result' > /dev/null; then
          echo "Error creating change:"
          echo "$RESPONSE" | jq .
          exit 1
        fi
        
        # Extract and output results
        CHANGE_NUMBER=$(echo "$RESPONSE" | jq -r '.result.number')
        SYS_ID=$(echo "$RESPONSE" | jq -r '.result.sys_id')
        LINK="https://$INSTANCE/nav_to.do?uri=change_request.do?sys_id=$SYS_ID"
        
        echo "‚úÖ Change $CHANGE_NUMBER created successfully!"
        echo "üîó View change: $LINK"
        
        # Set outputs
        echo "change_number=$CHANGE_NUMBER" >> $GITHUB_OUTPUT
        echo "sys_id=$SYS_ID" >> $GITHUB_OUTPUT
        echo "link=$LINK" >> $GITHUB_OUTPUT
